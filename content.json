{"meta":{"title":"熊猫菌的小站","subtitle":"加油，打工人！","description":"站在巨人的肩膀上！","author":"熊猫菌","url":"https://github.com/moexiong/moexiong.github.io/tree/master","root":"/"},"pages":[{"title":"","date":"2021-05-09T13:29:07.970Z","updated":"2021-05-09T13:29:07.970Z","comments":true,"path":"data/sentences.json","permalink":"https://github.com/moexiong/moexiong.github.io/tree/master/data/sentences.json","excerpt":"","text":"[{\"content\":\"错的不是我，是世界。\",\"author\":\"鲁路修·兰佩路基\",\"from\":\"Code Geass 反叛的鲁路修\"},{\"content\":\"我们一日日度过的所谓日常，实际上可能是接连不断的奇迹。\",\"from\":\"日常\"},{\"content\":\"隐约雷鸣 阴霾天空 但盼风雨来 能留你在此。\",\"from\":\"万叶集·雷神短歌\"},{\"content\":\"人类的悲欢并不相通，我只觉得他们吵闹。\",\"author\":\"鲁迅\",\"from\":\"小杂感\"},{\"content\":\"遍身罗绮者，不是养蚕人。\",\"author\":\"张俞\",\"from\":\"蚕妇\"},{\"content\":\"今日は……风が騒がしいな…（今日的风儿甚是喧嚣……）\",\"author\":\"田畑秀则\",\"from\":\"男子高中生的日常\"},{\"content\":\"人类的赞歌是勇气的赞歌！人类的伟大是勇气的伟大！！\",\"author\":\"威廉·A·齐贝林\",\"from\":\"JOJO 的奇妙冒险 幻影之血\"},{\"content\":\"人生就像蒲公英，看似自由，实则身不由己。\",\"from\":\"日常\"},{\"content\":\"大师，什么是快乐的秘诀？「不要和愚者争论。」大师，我完全不同意这就是秘诀。「是的，你是对的。」\",\"from\":\"日常\"}]"},{"title":"异世界","date":"2021-05-09T14:42:00.107Z","updated":"2021-05-09T14:42:00.107Z","comments":true,"path":"/404.html","permalink":"https://github.com/moexiong/moexiong.github.io/tree/master/404.html","excerpt":"","text":""},{"title":"没错，我就是二刺螈","date":"2021-05-09T14:13:42.000Z","updated":"2021-05-10T15:12:13.035Z","comments":true,"path":"about/index.html","permalink":"https://github.com/moexiong/moexiong.github.io/tree/master/about/index.html","excerpt":"","text":"不积跬步无以至千里，不积小流无以成江河！长路慢慢修远兮，每天都要笑嘻嘻！"},{"title":"文章分类","date":"2021-05-09T14:12:21.000Z","updated":"2021-05-09T14:39:06.027Z","comments":false,"path":"categories/index.html","permalink":"https://github.com/moexiong/moexiong.github.io/tree/master/categories/index.html","excerpt":"","text":""},{"title":"膜拜的大佬们","date":"2021-05-10T17:26:32.333Z","updated":"2021-05-10T17:26:32.333Z","comments":true,"path":"links/index.html","permalink":"https://github.com/moexiong/moexiong.github.io/tree/master/links/index.html","excerpt":"","text":""},{"title":"文章标签","date":"2021-05-09T14:10:38.000Z","updated":"2021-05-09T14:39:09.708Z","comments":false,"path":"tags/index.html","permalink":"https://github.com/moexiong/moexiong.github.io/tree/master/tags/index.html","excerpt":"","text":""},{"title":"可爱的女孩子","date":"2021-05-09T14:27:40.522Z","updated":"2021-05-09T14:27:40.522Z","comments":true,"path":"girls/index.html","permalink":"https://github.com/moexiong/moexiong.github.io/tree/master/girls/index.html","excerpt":"","text":""},{"title":"关于站点","date":"2021-05-09T14:13:42.000Z","updated":"2021-05-09T14:53:44.690Z","comments":true,"path":"about/site.html","permalink":"https://github.com/moexiong/moexiong.github.io/tree/master/about/site.html","excerpt":"","text":"好像没啥!"},{"title":"收藏的资源","date":"2021-05-10T17:41:39.477Z","updated":"2021-05-10T17:41:39.477Z","comments":true,"path":"stores/index.html","permalink":"https://github.com/moexiong/moexiong.github.io/tree/master/stores/index.html","excerpt":"","text":""}],"posts":[{"title":"Kafka基础之简单搭建","slug":"Kafka基础之简单搭建","date":"2021-05-11T15:51:01.789Z","updated":"2021-05-11T15:54:55.151Z","comments":true,"path":"2021/05/11/Kafka基础之简单搭建/","link":"","permalink":"https://github.com/moexiong/moexiong.github.io/tree/master/2021/05/11/Kafka%E5%9F%BA%E7%A1%80%E4%B9%8B%E7%AE%80%E5%8D%95%E6%90%AD%E5%BB%BA/","excerpt":"","text":"Kafka基础之简单搭建环境准备 Linux JDK1.8+ Zookeeper 下载地址 Kafka 下载地址 单机Kafka搭建注意事项： 配置主机名和IP映射 关闭防火墙&amp;防火墙开机自启动 配置基础环境 安装JDK，并配置好环境变量，最好先确认是否有Java，可以把老版本的卸载。 rpm包安装：rpm -ivh jdk-8u291-linux-aarch64.rpmtar.gz包安装：tar -zxvf jdk-8u291-linux-aarch64.tar.gzJava的安装目录，假设是/usr/java/jdk-8u291这样。 环境变量可以在当前用户级别配置即.bashrc文件，也可以去全局配置/etc/profile下配置。这里以.bashrc为例：JAVA_HOME=/usr/java/jdk-8u291PATH=$PATH:$JAVA_HOME/binexport JAVA_HOMEexport PPATH 最后要让改的配置生效source .bashrc 修改配置下的主机名和IP映射 主机名在/etc/sysconfig/network下。修改主机名：HOSTNAME=CentOS主机名随便取，这里叫CentOS。IP映射在/etc/hosts下。修改IP映射：192.168.181.128 CentOS，跟windows一样的配法。 关闭防火墙和防火墙的自启。 先使用systemctl firewalld status可以查看防火墙状态。直接systemctl firewalld stop可以关闭防火墙。最后systemctl disabled firewalld可以关闭防火墙的开机自启。 配置zookeeper。 下载的tar.gz包先解压：tar -zxvf zookeeper-3.6.3.tar.gzZookeeper的安装目录，假设是/usr/zookeeper-3.6.3这样。 zookeeper的模板配置文件：/usr/zookeeper-3.6.3/conf/zoo_sample.cfg复制一份模板配置文件在同目录下：zoo.cfg。修改zoo.cfg的选项：dataDir=/root/zkdata变更数据目录。使用./usr/zookeeper-3.6.3/bin/zkServer.sh可以启动zk了。例：./bin/zkServer.sh start conf/zoo.cfg启动zk。 配置Kafka 下载的tar.gz包先解压：tar -zxvf kafka_2.11-2.6.2.tgzkafka的安装目录，假设是/usr/kafka_2.11-2.6.2这样。 kafka的模板配置文件：/usr/kafka_2.11-2.6.2/conf/server.properties修改server.properties选项：listeners=PLAINTEXT://CentOS:9092socket连接地址，这里最好填主机名，不要IP。修改server.properties选项：log.dirs=/usr/kafka-logs消息日志存储地址。修改server.properties选项：zookeeper.connect=CentOS:2181zk连接配置。使用./usr/kafka_2.11-2.6.2/bin/kafka-server-start.sh可以启动kafka了。例：./bin/kafka-server-start.sh -daemon config/server.properties后台启动。 配置Topic使用Kafka的kafka-topics.sh脚本来执行topic，分区，副本因子等配置。 连接上Broker服务器：./bin/kafka-topics.sh --bootstrap-server CentOS:9092 --create --topic topic01 --partitions 2 --replication-factor 1，创建了一个topic为topic01的主题，该topic下配置了2个分区日志数，同时为每一个分区日志配置了一个副本，CentOS作为Broker服务器主分区的Leader。 消费者开启：./bin/kafka-console-consumer.sh --bootstrap-server CentOS:9092 --topic topic01 --group group1，创建了一个消费者实例，消费topic为topic01这个主题下的消息，位于group1这个消费者组下，连接Broker服务器CentOS，这个时候group1只有一个消费者实例，所以会同时消费2个分区的数据。 生产者开启：./bin/kafka-console-producer.sh --broker-list CentOS:9092 --topic topic01，创建了一个生产者，将要想topic为topic01这个主题下投递消息，并连接当前主题的Broker服务器CentOS。 集群Kafka搭建注意事项(包含以上)： 配置同步时钟：ntpdate cn.pool.ntp.org，ntpdate ntp[1-7].aliyun.com[]里选填一个值就行。 集群间配置 在hosts文件中配置上多个服务器的IP映射 192.168.181.128 CentOSA,192.168.181.129 CentOSB,192.168.181.130 CentOSC等几台都可，这里是3台。同理集群中的其他服务器也需要这么配置。 配置zookeeper的配置文件zoo.cfg 在zoo.cfg后新增：server.1=CentOSA:2888:3888，server.2=CentOSA:2888:3888，server.3=CentOSA:2888:3888等服务器的地址。同理*32181端口：对cline端提供服务2888端口：集群内机器通讯使用（Leader监听此端口）3888端口：选举leader使用 配置Kafka集群 修改server.properties选项：zookeeper.connect=CentOSA:2181,CentOSB:2181,CentOSC:2181zk服务器连接配置，都配置上。同理*3修改server.properties选项：broker.id=1，broker.id=1，broker.id=2几个Broker的ID需要唯一配置。 集群间配置topic和单机版差不多的使用方式。多多利用命令–help，啥都有。还有官方文档可以查阅。 小结试了一下搭建，主要理解一下大致的运作，试试就好。","categories":[{"name":"消息中间件","slug":"消息中间件","permalink":"https://github.com/moexiong/moexiong.github.io/tree/master/categories/%E6%B6%88%E6%81%AF%E4%B8%AD%E9%97%B4%E4%BB%B6/"}],"tags":[{"name":"Kafka","slug":"Kafka","permalink":"https://github.com/moexiong/moexiong.github.io/tree/master/tags/Kafka/"},{"name":"实践过程","slug":"实践过程","permalink":"https://github.com/moexiong/moexiong.github.io/tree/master/tags/%E5%AE%9E%E8%B7%B5%E8%BF%87%E7%A8%8B/"}],"author":"熊猫菌"},{"title":"Kafka基础之配置文件","slug":"Kafka基础之配置文件","date":"2021-05-11T15:51:01.786Z","updated":"2021-05-11T15:56:58.520Z","comments":true,"path":"2021/05/11/Kafka基础之配置文件/","link":"","permalink":"https://github.com/moexiong/moexiong.github.io/tree/master/2021/05/11/Kafka%E5%9F%BA%E7%A1%80%E4%B9%8B%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/","excerpt":"","text":"Kafka基础之配置文件Kafka配置Kafka的主目录下 -&gt; conf目录下 -&gt; server.properties。主要常用的配置一般是broker.id，log.dirs，zookeeper.connect。 Kafka系统配置每一个broker在集群中的唯一标示，要求是正数。在改变IP地址，不改变broker.id的前提下，是不会影响consumers的消费的。broker.id = 0 Kafka的日志分区文件存放地址，核心的数据存储，多个地址的话采用逗号分割 /usr/kafka-logs-1，/usr/kafka-logs-2log.dirs = /tmp/kafka-logs 提供给客户端响应的端口port = 6667 消息提的最大大小，单位是字节message.max.bytes = 1000000 broker处理消息的最大线程数，一般情况下不需要去修改num.network.threads = 3 broker处理磁盘IO的线程数，数值应该大于你的硬盘数num.io.threads = 8 一些后台任务处理的线程数，例如过期消息文件的删除等，一般情况下不需要去做修改background.threads = 4 等待IO线程处理的请求队列最大数，若是等待IO的请求超过这个数值，那么会停止接受外部消息，算是一种自我保护机制queued.max.requests = 500 broker的主机地址，若是设置了，那么会绑定到这个地址上，若是没有，会绑定到所有的接口上，并将其中之一发送到ZK，一般不设置host.name 打广告的地址，若是设置的话，会提供给producers, consumers,其他broker连接，具体如何使用还未深究advertised.host.name 广告地址端口，必须不同于port中的设置advertised.port socket的发送缓冲区，socket的调优参数SO_SNDBUFFsocket.send.buffer.bytes = 100 * 1024 socket的接受缓冲区，socket的调优参数SO_RCVBUFFsocket.receive.buffer.bytes = 100 * 1024 socket请求的最大数值，防止serverOOM，message.max.bytes必然要小于socket.request.max.bytes，会被topic创建时的指定参数覆盖socket.request.max.bytes = 100 * 1024 * 1024 Kafka日志配置topic的分区是以一堆segment文件存储的，这个控制每个segment的大小，会被topic创建时的指定参数覆盖log.segment.bytes = 1024 * 1024 * 1024 这个参数会在日志segment没有达到log.segment.bytes设置的大小，也会强制新建一个segment 会被 topic创建时的指定参数覆盖log.roll.hours = 24 * 7 日志清理策略 选择有：delete和compact 主要针对过期数据的处理，或是日志文件达到限制的额度，会被 topic创建时的指定参数覆盖log.cleanup.policy = delete 数据存储的最大时间 超过这个时间 会根据log.cleanup.policy设置的策略处理数据，也就是消费端能够多久去消费数据，log.retention.bytes和log.retention.minutes任意一个达到要求，都会执行删除，会被topic创建时的指定参数覆盖log.retention.minutes = 7 days 指定日志每隔多久检查看是否可以被删除，默认1分钟log.cleanup.interval.mins = 1 topic每个分区的最大文件大小，一个topic的大小限制 = 分区数 * log.retention.bytes。-1没有大小限制，log.retention.bytes和log.retention.minutes任意一个达到要求，都会执行删除，会被topic创建时的指定参数覆盖log.retention.bytes = -1 文件大小检查的周期时间，是否处罚 log.cleanup.policy中设置的策略log.retention.check.interval.ms = 5 minutes 是否开启日志压缩log.cleaner.enable = false 日志压缩运行的线程数log.cleaner.threads = 1 日志压缩时候处理的最大大小log.cleaner.io.max.bytes.per.second = None 日志压缩去重时候的缓存空间 ，在空间允许的情况下，越大越好log.cleaner.dedupe.buffer.size = 500 * 1024 * 1024 日志清理时候用到的IO块大小 一般不需要修改log.cleaner.io.buffer.size = 512 * 1024 日志清理中hash表的扩大因子 一般不需要修改log.cleaner.io.buffer.load.factor = 0.9 检查是否处罚日志清理的间隔log.cleaner.backoff.ms = 15000 日志清理的频率控制，越大意味着更高效的清理，同时会存在一些空间上的浪费，会被topic创建时的指定参数覆盖log.cleaner.min.cleanable.ratio = 0.5 对于压缩的日志保留的最长时间，也是客户端消费消息的最长时间，同log.retention.minutes的区别在于一个控制未压缩数据，一个控制压缩后的数据。会被topic创建时的指定参数覆盖log.cleaner.delete.retention.ms = 1 day 对于segment日志的索引文件大小限制，会被topic创建时的指定参数覆盖log.index.size.max.bytes = 10 * 1024 * 1024 当执行一个fetch操作后，需要一定的空间来扫描最近的offset大小，设置越大，代表扫描速度越快，但是也更好内存，一般情况下不需要搭理这个参数log.index.interval.bytes = 4096 log文件 “sync” 到磁盘之前累积的消息条数，因为磁盘IO操作是一个慢操作，但又是一个 “数据可靠性” 的必要手段，所以此参数的设置,需要在 “数据可靠性” 与 “性能” 之间做必要的权衡，如果此值过大,将会导致每次 “fsync” 的时间较长(IO阻塞)，如果此值过小,将会导致 “fsync” 的次数较多,这也意味着整体的client请求有一定的延迟，物理server故障,将会导致没有fsync的消息丢失。log.flush.interval.messages = None 检查是否需要固化到硬盘的时间间隔log.flush.scheduler.interval.ms = 3000 仅仅通过interval来控制消息的磁盘写入时机,是不足的，此参数用于控制 “fsync” 的时间间隔,如果消息量始终没有达到阀值,但是离上一次磁盘同步的时间间隔达到阀值,也将触发.log.flush.interval.ms = None 文件在索引中清除后保留的时间 一般不需要去修改log.delete.delay.ms = 60000 控制上次固化硬盘的时间点，以便于数据恢复 一般不需要去修改log.flush.offset.checkpoint.interval.ms = 60000 Kafka主题配置是否允许自动创建topic ，若是 false ，就需要通过命令创建topicauto.create.topics.enable = true 一个topic ，默认分区的replication个数 ，不得大于集群中broker的个数default.replication.factor = 1 每个topic的分区个数，若是在topic创建时候没有指定的话 会被topic创建时的指定参数覆盖num.partitions = 1 实例 –replication-factor 3 –partitions 1 –topic replicated-topic ：名称replicated-topic有一个分区，分区被复制到三个broker上。 Kafka副本配置partition leader与replicas之间通讯时,socket的超时时间controller.socket.timeout.ms = 30000 partition leader与replicas数据同步时,消息的队列尺寸controller.message.queue.size = 10 replicas响应partition leader的最长等待时间，若是超过这个时间，就将replicas列入ISR(in-sync replicas)，并认为它是死的，不会再加入管理中replica.lag.time.max.ms = 10000 如果follower落后与leader太多,将会认为此follower[或者说partition relicas]已经失效，通常,在follower与leader通讯时,因为网络延迟或者链接断开,总会导致replicas中消息同步滞后，如果消息之后太多,leader将认为此follower网络延迟较大或者消息吞吐能力有限,将会把此replicas迁移到其他follower中，在broker数量较少,或者网络不足的环境中,建议提高此值.replica.lag.max.messages = 4000 follower与leader之间的socket超时时间replica.socket.timeout.ms = 30 * 1000 leader复制时候的socket缓存大小replica.socket.receive.buffer.bytes = 64 * 1024 replicas每次获取数据的最大大小replica.fetch.max.bytes = 1024 * 1024 replicas同leader之间通信的最大等待时间，失败了会重试replica.fetch.wait.max.ms = 500 fetch的最小数据尺寸,如果leader中尚未同步的数据不足此值,将会阻塞,直到满足条件replica.fetch.min.bytes = 1 leader 进行复制的线程数，增大这个数值会增加follower的IOnum.replica.fetchers = 1 每个replica检查是否将最高水位进行固化的频率replica.high.watermark.checkpoint.interval.ms = 5000 是否允许控制器关闭broker ,若是设置为 true ,会关闭所有在这个broker上的leader，并转移到其他brokercontrolled.shutdown.enable = false 控制器关闭的尝试次数controlled.shutdown.max.retries = 3 每次关闭尝试的时间间隔controlled.shutdown.retry.backoff.ms = 5000 是否自动平衡broker之间的分配策略auto.leader.rebalance.enable = false leader的不平衡比例，若是超过这个数值，会对分区进行重新的平衡leader.imbalance.per.broker.percentage = 10 检查leader是否不平衡的时间间隔leader.imbalance.check.interval.seconds = 300 客户端保留offset信息的最大空间大小offset.metadata.max.bytes Kafka ZK配置zookeeper集群的地址，可以是多个，多个之间用逗号分割 hostname1:port1,hostname2:port2,hostname3:port3zookeeper.connect = localhost:2181 ZooKeeper的最大超时时间，就是心跳的间隔，若是没有反映，那么认为已经死了，不易过大zookeeper.session.timeout.ms = 6000 ZooKeeper的连接超时时间zookeeper.connection.timeout.ms = 6000 ZooKeeper集群中leader和follower之间的同步实际那zookeeper.sync.time.ms = 2000 配置的修改其中一部分配置是可以被每个topic自身的配置所代替，例如 新增配置：bin/kafka-topics.sh –zookeeper localhost: 2181 –create –topic my-topic –partitions 1 –replication-factor 1 –config max.message.bytes= 64000 –config flush.messages= 1 修改配置：bin/kafka-topics.sh –zookeeper localhost: 2181 –alter –topic my-topic –config max.message.bytes= 128000 删除配置：bin/kafka-topics.sh –zookeeper localhost: 2181 –alter –topic my-topic –deleteConfig max.message.bytes CONSUMER 配置最为核心的配置是group.id、zookeeper.connect Consumer归属的组ID，broker是根据group.id来判断是队列模式还是发布订阅模式，非常重要group.id 消费者的ID，若是没有设置的话，会自增consumer.id 一个用于跟踪调查的ID ，最好同group.id相同client.id = group id value 对于zookeeper集群的指定，可以是多个 hostname1:port1,hostname2:port2,hostname3:port3 必须和broker使用同样的zk配置zookeeper.connect=localhost: 2182 zookeeper的心跳超时时间，查过这个时间就认为是dead消费者zookeeper.session.timeout.ms = 6000 zookeeper的等待连接时间zookeeper.connection.timeout.ms = 6000 zookeeper的follower同leader的同步时间zookeeper.sync.time.ms = 2000 当zookeeper中没有初始的offset时候的处理方式 。smallest ：重置为最小值largest:重置为最大值anything else：抛出异常auto.offset.reset = largest socket的超时时间，实际的超时时间是：max.fetch.wait + socket.timeout.ms.socket.timeout.ms = 30 * 1000 socket的接受缓存空间大小socket.receive.buffer.bytes = 64 * 1024 从每个分区获取的消息大小限制fetch.message.max.bytes = 1024 * 1024 是否在消费消息后将offset同步到zookeeper，当Consumer失败后就能从zookeeper获取最新的offsetauto.commit.enable = true 自动提交的时间间隔auto.commit.interval.ms = 60 * 1000 用来处理消费消息的块，每个块可以等同于fetch.message.max.bytes中数值queued.max.message.chunks = 10 当有新的consumer加入到group时,将会reblance,此后将会有partitions的消费端迁移到新的consumer上,如果一个consumer获得了某个partition的消费权限,那么它将会向zk注册”Partition Owner registry” 节点信息,但是有可能此时旧的consumer尚没有释放此节点,此值用于控制,注册节点的重试次数.rebalance.max.retries = 4 每次再平衡的时间间隔rebalance.backoff.ms = 2000 每次重新选举leader的时间refresh.leader.backoff.ms server发送到消费端的最小数据，若是不满足这个数值则会等待，知道满足数值要求fetch.min.bytes = 1 若是不满足最小大小(fetch.min.bytes)的话，等待消费端请求的最长等待时间fetch.wait.max.ms = 100 指定时间内没有消息到达就抛出异常，一般不需要改consumer.timeout.ms = -1 PRODUCER的配置比较核心的配置：metadata.broker.list、request.required.acks、producer.type、serializer.class 消费者获取消息元信息(topics, partitions and replicas)的地址,配置格式是：host1:port1,host2:port2，也可以在外面设置一个vipmetadata.broker.list 消息的确认模式0 ：不保证消息的到达确认，只管发送，低延迟但是会出现消息的丢失，在某个server失败的情况下，有点像TCP1 ：发送消息，并会等待leader 收到确认后，一定的可靠性-1 ：发送消息，等待leader收到确认，并进行复制操作后，才返回，最高的可靠性request.required.acks = 0 消息发送的最长等待时间request.timeout.ms = 10000 socket的缓存大小send.buffer.bytes = 100 * 1024 key的序列化方式，若是没有设置，同serializer.classkey.serializer.class 分区的策略，默认是取模partitioner.class = kafka.producer.DefaultPartitioner 消息的压缩模式，默认是none，可以有gzip和snappycompression.codec = none 可以针对默写特定的topic进行压缩compressed.topics= null 消息发送失败后的重试次数message.send.max.retries = 3 每次失败后的间隔时间retry.backoff.ms = 100 生产者定时更新topic元信息的时间间隔 ，若是设置为 0 ，那么会在每个消息发送后都去更新数据topic.metadata.refresh.interval.ms = 600 * 1000 用户随意指定，但是不能重复，主要用于跟踪记录消息client.id = &quot;&quot; Kafka消息模式配置生产者的类型 async:异步执行消息的发送 sync：同步执行消息的发送producer.type = sync 异步模式下，那么就会在设置的时间缓存消息，并一次性发送queue.buffering.max.ms = 5000 异步的模式下 最长等待的消息数queue.buffering.max.messages = 10000 异步模式下，进入队列的等待时间 若是设置为 0 ，那么要么进入队列，要么直接抛弃queue.enqueue.timeout.ms = -1 异步模式下，每次发送的最大消息数，前提是触发了queue.buffering.max.messages或是queue.buffering.max.ms的限制batch.num.messages = 200 消息体的系列化处理类 ，转化为字节流进行传输serializer. class = kafka.serializer.DefaultEncoder 小结配置是真的多，不过大多都用不上吧。 转自：kafka 配置文件参数详解","categories":[{"name":"消息中间件","slug":"消息中间件","permalink":"https://github.com/moexiong/moexiong.github.io/tree/master/categories/%E6%B6%88%E6%81%AF%E4%B8%AD%E9%97%B4%E4%BB%B6/"}],"tags":[{"name":"Kafka","slug":"Kafka","permalink":"https://github.com/moexiong/moexiong.github.io/tree/master/tags/Kafka/"},{"name":"配置文件","slug":"配置文件","permalink":"https://github.com/moexiong/moexiong.github.io/tree/master/tags/%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/"}],"author":"熊猫菌"},{"title":"Kafka基础之入门知识","slug":"Kafka基础之入门知识","date":"2021-05-10T16:25:52.596Z","updated":"2021-05-11T15:54:27.194Z","comments":true,"path":"2021/05/11/Kafka基础之入门知识/","link":"","permalink":"https://github.com/moexiong/moexiong.github.io/tree/master/2021/05/11/Kafka%E5%9F%BA%E7%A1%80%E4%B9%8B%E5%85%A5%E9%97%A8%E7%9F%A5%E8%AF%86/","excerpt":"","text":"Kafka基础之入门知识Kafka介绍Kafka是由Apache软件基金会开发的一个开源流处理平台，由Scala和Java编写。Kafka是一种高吞吐量的分布式发布订阅消息系统，他可以收集并处理用户在网站中的所有动作流数据以及物流网设备的采样信息。 Kafka使用场景 系统间消息解耦 异步通信 削峰填谷 Kafka Streaming实时在线流处理 Kafka基础架构Kafka基本是以集群的形式存在的，以Topic形式负责分类集群中的Record，每一个Record属于一个Topic。每个Topic底层都会对应一组分区的日志用于持久化Topic中的Record。同时在Kafka集群中，Topic的每一个日志的分区都一定会有一个Broker担当该分区的Leader，其他的Broker担当该分区的Follower，Leader负责分区数据的读写操作，Follower负责同步该分区的数据。这样如果分区的Leader宕机，该分区的其他Follower会选取出新的Leader继续负责该分区数据的读写。其中集群中的Leader的监控和Topic的部分元数据是存储在zookeeper中。 简单场景示意 生产者：投递消息到一个topic中 消费者：可以同时订阅多个topic获取消息 消息分发策略 hash(key)%分区：根据key的hash值，将消息均匀的散列在同一个topic的不同分区上 分区：一个topic下可以配置多个分区 副本因子：每个主要分区备份数据的副本数量 Broker：一个Broker一定是至少主要负责某一个分区的读写，可以负责其他分区的副本。当某一个分区的Broker宕机后，zookeeper会重新选举一个已宕机的分区Leader出来，一个Broker可能身兼多个分区Leader。 Kafka分区日志Kafka中所有消息是通过Topic为单位进行管理，每个Kafka中的Topic通常会有多个订阅者，负责订阅发送到该Topic中的数据。Kafka负责管理集群中每个Topic的一组日志分区数据。 每组日志分区是一个有序的不可变的日志序列，分区中的每一个Record都被分配了唯一的序列编号称为是offset，Kafka集群会持久化所有发布到Topic中的Record消息，该Record的持久化时间是通过配置文件指定，默认是168小时。 1log.retention.hours&#x3D;168 Kafka底层会定期的检查日志文件，然后将过期的数据从log中移除，由于Kafka使用硬盘存储文件，因此使用Kafka长时间缓存一些日志文件是不存在问题的。 分区日志示意 分发分区策略：可以选择轮询或者hash等不同策略 old -&gt; new：消息有序按时间顺序增长，但是整个Topic内的顺序不能保证先进先出，只能保证单个分区是有序的。如果想作为先进先出的队列使用，建议不分区。 不能保证FIFO为啥还要对日志分区： 首先，它们允许日志扩展到超出单个服务器所能容纳的大小。每个单独的分区都必须适合托管它的服务器，但是一个Topic可能有很多分区，因此它可以处理任意数量的数据。 其次每个服务器充当某些分区的Leader，也可能充当其他分区的Follower，因此集群中的负载的得到了很好的平衡。 单个Topic的写入性能得到了极大的提升，不同的分区是由不同的Broker来负责读写，提升了吞吐量。 Kafka生产者&amp;消费者组消费者在消费Topic中的数据的时候，每个消费者会维护本次消费对应分区的偏移量(offset)，消费者会在消费玩一个批次的数据之后，会将本次消费的偏移量提交给Kafka集群，因此对于每个消费者而言可以随意的控制该消费者的偏移量。因此Kafka中，消费者可以从一个topic分区中的任意位置读取队列数据，由于每个消费者控制了自己的消费的偏移量，因此多个消费者之间彼此相互独立。 生产者&amp;消费者组 生产者偏移量：只管往后写，最后一个消息偏移量就是当前分区已写入的总消息量 消费者偏移量：消费者可以从分区的任意一个偏移量开始读，每次读之后，消费者会主动通知Kafka当前已读的偏移量，值是下一个偏移量。即当访问了偏移量为15时，提交访问偏移量为16。 消费者组：消费者会使用Consumer Group名称来标识自己，并且发布到Topic的每条记录都会传递到每个订阅Consumer Group中的一个消费者实例，如果所有的消费者实例都具有相同的Consumer Group，那么Topic中的记录会在该Consumer Group中Consumer实例进行均分消费；如果所有的Consumer实例具有不同的Consumer Group，则每条记录会广播到所有的Consumer Group进程。 简而言之：一个Consumer Group可以理解为一个逻辑上的订阅者。它由多个Consumer实例组成，以实现可伸缩性和容错性能力。Topic按照分区的方式均分给一个Consumer Group下的所有实例，如果Consumer Group有新成员加入，则它会分担其他消费者负责的某些分区；同理如果一个Consumer Group下有实例宕机，则由该Group下的其他实例接管宕机的实例所负责的分区。 当消费者组内的消费者实例数大于Topic分区数时：多于的消费者实例会闲着，当存在已被分区的实例宕机时，会自动接管宕机实例的分区进行消费。 Kafka顺序写入和mmapKafka的特性之一就是高吞吐量，但是Kafka的消息是保存或缓存在磁盘上的，一般认为在磁盘上的读写数据是会降低性能的，但是Kafka即使是普通的服务器也可以轻松支持秒级百万的写入请求，超过了大部分的消息中间件，这种特性也使得Kafka在日志处理等海量数据场景应用广泛。Kafka会把收到的数据都写入到磁盘上，为了防止丢数据，优化写入速度，Kafka采用了2个技术：顺序写入和MMFile。 顺序写入：硬盘是机械结构，每次读写都会1.寻址 -&gt; 2.写入。其中寻址是一个最耗时的动作，所以硬盘最讨厌随机IO，喜欢顺序IO，所以为了提高硬盘的读写速度，Kafka就是使用的顺序IO。这样省去了大量的内存开销以及节省了IO寻址的时间。但是单纯的使用顺序写入，Kafka的写入性能也不可能和内存进行对比，因此Kafka的数据并不是实时的写入磁盘中。 MMFile：Kafka充分利用了现代操作系统分页存储来利用内存提高IO效率。Memory Mapped Files(mmap)内存映射文件，在64位操作系统中一般可以表示20G的数据文件，它的工作原理是直接利用操作系统的Page实现文件到物理内存的直接映射。完成mmap映射后，用户对内存的所有操作会被操作系统自动的刷新到磁盘上，极大地降低了IO使用率。 顺序写&amp;MMF 用户空间：应用一般都是运行在用户空间下，只需要将数据写入到内存页PageCache中即可，后面不需要等待缓存刷新到磁盘的过程，而且即使应用宕机，也并不会影响已经写入内存页的数据丢失。 内核空间：由操作系统底层自己控制，自动将PageCache上的数据刷到磁盘上，没有用户空间切换下，减少了一定的IO，相对的，可支持的IO就更大。 问题：如果内核不稳定，出现问题，就会导致应用没有故障还是丢失数据的问题。毕竟高吞吐量和一致性不能全部都万无一失。 Kafka读取零拷贝Kafka客户端在响应客户端读取的时候，底层使用Zero Copy(零拷贝)技术，直接将磁盘无需拷贝到用户空间，而是直接将数据通过内核空间传递输出，数据并没有抵达用户空间。 传统IO操作示意图 传统IO操作流程： 用户进程调用read等系统调用向操作系统发出IO请求，请求读取数据到自己的内存缓冲区中，自己进入阻塞状态。 操作系统收到请求后，进一步将IO请求发送磁盘。 磁盘驱动器收到内核的IO请求，把数据从磁盘读取到驱动器的缓冲中，此时不占用CPU。当驱动器的缓冲区被读满后，向内核发起中断信号告知自己缓冲区已满。 内核收到中断，使用CPU时间将磁盘驱动器中缓冲中的数据拷贝到内核缓冲区中。 如果内核缓冲区的数据少于用户申请的读的数据，重复步骤3和步骤4，直到内核缓冲区的数据足够多为止。 将数据从内核缓冲区拷贝到用户缓冲区，同时从系统调用中返回，回到用户空间，完成任务。 DMA示意图 DMA：协处理器，协助CPU做IO调度。 相对于传统IO：减少了CPU控制中断的次数，不妨碍CPU的执行计算，可以大大提高CPU的计算能力。 传统或DMA模式下IO 用户访问服务器正常读取流程： 文件在磁盘中数据被copy到内核缓冲区。 从内核缓冲区copy到用户缓冲区。 用户缓冲区copy到内核与socket相关的缓冲区。 数据从socket缓冲区copy到相关协议引擎发送出去。 一共经历了4次数据拷贝，2次用户态和内核态的切换。 零拷贝示意图 零拷贝下的读取流程： 文件在磁盘中数据被copy到内核缓冲区。 从内核缓冲区copy到内核与socket相关的缓冲区。 数据从socket缓冲区copy到相关协议引擎发送出去。 一共经历了3次数据拷贝，没有用户态和内核态的切换。 小结Kafka为什么读入和写入性能高？ 分区特性决定了读入和写入的性能，重点在高吞吐量。 顺序写入和MMF决定了写入性能的提升。 零拷贝决定了读取性能的提升。","categories":[{"name":"消息中间件","slug":"消息中间件","permalink":"https://github.com/moexiong/moexiong.github.io/tree/master/categories/%E6%B6%88%E6%81%AF%E4%B8%AD%E9%97%B4%E4%BB%B6/"}],"tags":[{"name":"Kafka","slug":"Kafka","permalink":"https://github.com/moexiong/moexiong.github.io/tree/master/tags/Kafka/"},{"name":"大数据","slug":"大数据","permalink":"https://github.com/moexiong/moexiong.github.io/tree/master/tags/%E5%A4%A7%E6%95%B0%E6%8D%AE/"},{"name":"消息队列","slug":"消息队列","permalink":"https://github.com/moexiong/moexiong.github.io/tree/master/tags/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/"}],"author":"熊猫菌"}],"categories":[{"name":"消息中间件","slug":"消息中间件","permalink":"https://github.com/moexiong/moexiong.github.io/tree/master/categories/%E6%B6%88%E6%81%AF%E4%B8%AD%E9%97%B4%E4%BB%B6/"}],"tags":[{"name":"Kafka","slug":"Kafka","permalink":"https://github.com/moexiong/moexiong.github.io/tree/master/tags/Kafka/"},{"name":"实践过程","slug":"实践过程","permalink":"https://github.com/moexiong/moexiong.github.io/tree/master/tags/%E5%AE%9E%E8%B7%B5%E8%BF%87%E7%A8%8B/"},{"name":"配置文件","slug":"配置文件","permalink":"https://github.com/moexiong/moexiong.github.io/tree/master/tags/%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/"},{"name":"大数据","slug":"大数据","permalink":"https://github.com/moexiong/moexiong.github.io/tree/master/tags/%E5%A4%A7%E6%95%B0%E6%8D%AE/"},{"name":"消息队列","slug":"消息队列","permalink":"https://github.com/moexiong/moexiong.github.io/tree/master/tags/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/"}]}