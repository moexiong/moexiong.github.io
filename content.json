{"meta":{"title":"熊猫菌的小站","subtitle":"加油，打工人！","description":"站在巨人的肩膀上！","author":"熊猫菌","url":"http://example.com","root":"/"},"pages":[{"title":"","date":"2021-05-09T13:29:07.970Z","updated":"2021-05-09T13:29:07.970Z","comments":true,"path":"data/sentences.json","permalink":"http://example.com/data/sentences.json","excerpt":"","text":"[{\"content\":\"错的不是我，是世界。\",\"author\":\"鲁路修·兰佩路基\",\"from\":\"Code Geass 反叛的鲁路修\"},{\"content\":\"我们一日日度过的所谓日常，实际上可能是接连不断的奇迹。\",\"from\":\"日常\"},{\"content\":\"隐约雷鸣 阴霾天空 但盼风雨来 能留你在此。\",\"from\":\"万叶集·雷神短歌\"},{\"content\":\"人类的悲欢并不相通，我只觉得他们吵闹。\",\"author\":\"鲁迅\",\"from\":\"小杂感\"},{\"content\":\"遍身罗绮者，不是养蚕人。\",\"author\":\"张俞\",\"from\":\"蚕妇\"},{\"content\":\"今日は……风が騒がしいな…（今日的风儿甚是喧嚣……）\",\"author\":\"田畑秀则\",\"from\":\"男子高中生的日常\"},{\"content\":\"人类的赞歌是勇气的赞歌！人类的伟大是勇气的伟大！！\",\"author\":\"威廉·A·齐贝林\",\"from\":\"JOJO 的奇妙冒险 幻影之血\"},{\"content\":\"人生就像蒲公英，看似自由，实则身不由己。\",\"from\":\"日常\"},{\"content\":\"大师，什么是快乐的秘诀？「不要和愚者争论。」大师，我完全不同意这就是秘诀。「是的，你是对的。」\",\"from\":\"日常\"}]"},{"title":"异世界","date":"2021-05-09T14:42:00.107Z","updated":"2021-05-09T14:42:00.107Z","comments":true,"path":"/404.html","permalink":"http://example.com/404.html","excerpt":"","text":""},{"title":"没错，我就是二刺螈","date":"2021-05-09T14:13:42.000Z","updated":"2021-05-09T14:43:24.050Z","comments":true,"path":"about/index.html","permalink":"http://example.com/about/index.html","excerpt":"","text":"咸鱼一号，出击！"},{"title":"文章分类","date":"2021-05-09T14:12:21.000Z","updated":"2021-05-09T14:39:06.027Z","comments":false,"path":"categories/index.html","permalink":"http://example.com/categories/index.html","excerpt":"","text":""},{"title":"我的小伙伴们","date":"2021-05-09T14:44:47.334Z","updated":"2021-05-09T14:44:47.334Z","comments":true,"path":"links/index.html","permalink":"http://example.com/links/index.html","excerpt":"","text":""},{"title":"文章标签","date":"2021-05-09T14:10:38.000Z","updated":"2021-05-09T14:39:09.708Z","comments":false,"path":"tags/index.html","permalink":"http://example.com/tags/index.html","excerpt":"","text":""},{"title":"可爱的女孩子","date":"2021-05-09T14:27:40.522Z","updated":"2021-05-09T14:27:40.522Z","comments":true,"path":"girls/index.html","permalink":"http://example.com/girls/index.html","excerpt":"","text":""},{"title":"关于站点","date":"2021-05-09T14:13:42.000Z","updated":"2021-05-09T14:53:44.690Z","comments":true,"path":"about/site.html","permalink":"http://example.com/about/site.html","excerpt":"","text":"好像没啥!"},{"title":"收藏的资源","date":"2021-05-09T15:00:01.542Z","updated":"2021-05-09T15:00:01.542Z","comments":true,"path":"stores/index.html","permalink":"http://example.com/stores/index.html","excerpt":"","text":""}],"posts":[{"title":"java-base-reference","slug":"Java-引用","date":"2021-01-06T01:38:30.000Z","updated":"2021-01-07T15:19:43.591Z","comments":true,"path":"2021/01/06/Java-引用/","link":"","permalink":"http://example.com/2021/01/06/Java-%E5%BC%95%E7%94%A8/","excerpt":"Java对象引用的4个级别：强引用 &gt; 软引用 &gt; 弱引用 &gt; 虚引用强引用：强引用存在时，对象就不会被GC回收掉，Jvm宁愿抛出OOM异常，也不会在GC时回收掉该对象。","text":"Java对象引用的4个级别：强引用 &gt; 软引用 &gt; 弱引用 &gt; 虚引用强引用：强引用存在时，对象就不会被GC回收掉，Jvm宁愿抛出OOM异常，也不会在GC时回收掉该对象。 测试代码： 123456789101112131415161718192021222324byte[] arr &#x3D; null;byte[] arr2 &#x3D; null;try &#123; arr &#x3D; new byte[1024 * 1024 * 12]; &#x2F;&#x2F; arr：(有值) System.out.println(&quot;arr new: &quot; + arr); &#x2F;&#x2F; 通知jvm gc System.gc(); &#x2F;&#x2F; 这里睡2s是为了保证gc能执行完成 Thread.sleep(2000); &#x2F;&#x2F; arr：gc是不能直接回收的，(有值) System.out.println(&quot;arr after gc: &quot; + arr); &#x2F;&#x2F; 设置最大堆空间为20M，这个会由于申请不到内存直接OOM arr2 &#x3D; new byte[1024 * 1024 * 12]; &#x2F;&#x2F; arr2：(无法输出) System.out.println(&quot;arr2 new: &quot; + arr2);&#125; catch (Exception e) &#123; e.printStackTrace();&#125; finally &#123; &#x2F;&#x2F; arr：gc没有回收，(有值) System.out.println(&quot;arr final: &quot; + arr); &#x2F;&#x2F; arr2：申请不到内存，(无值) System.out.println(&quot;arr2 final: &quot; + arr2);&#125; 输出结果： 123456arr new: [B@1b6d3586arr after gc: [B@1b6d3586arr final: [B@1b6d3586arr2 final: nullException in thread &quot;main&quot; java.lang.OutOfMemoryError: Java heap space at com.zsx.base.reference.NormalReference.main(NormalReference.java:22) 从输出结果可以看出，强引用对象在引用存在时，gc是不会回收的；当内存不足时，gc也不会强制回收，而是宁愿抛出OOM异常。这里说明一下：输出中**[B1b6d3586**的含义是=&gt; [：表示数组，B：表示Byte类型，1b6d3586：对象的hash值。 软引用软引用存在时，在内存充足时，不会被gc回收掉，当内存不足时，会被gc回收。 测试代码： 123456789101112131415161718192021222324SoftReference&lt;byte[]&gt; arr &#x3D; null;byte[] arr2 &#x3D; null;try &#123; arr &#x3D; new SoftReference&lt;byte[]&gt;(new byte[1024 * 1024 * 12]); &#x2F;&#x2F; arr：(有值) System.out.println(&quot;arr new: &quot; + arr.get()); &#x2F;&#x2F; 通知jvm gc System.gc(); &#x2F;&#x2F; 这里睡2s是为了保证gc能执行完成 Thread.sleep(2000); &#x2F;&#x2F; arr：gc是不能直接回收的，(有值) System.out.println(&quot;arr after gc: &quot; + arr.get()); &#x2F;&#x2F; 设置最大堆空间为20M，这个会由于内存不足，然后触发gc回收掉软引用arr arr2 &#x3D; new byte[1024 * 1024 * 12]; &#x2F;&#x2F; arr2：(有值) System.out.println(&quot;arr2 new: &quot; + arr2);&#125; catch (Exception e) &#123; e.printStackTrace();&#125; finally &#123; &#x2F;&#x2F; arr：gc已强制回收，(无值) System.out.println(&quot;arr final: &quot; + arr.get()); &#x2F;&#x2F; arr2：gc回收了arr，new了arr2(有值) System.out.println(&quot;arr2 final: &quot; + arr2);&#125; 输出结果： 12345arr new: [B@1b6d3586arr after gc: [B@1b6d3586arr2 new: [B@4554617carr final: nullarr2 final: [B@4554617c 从输出结果可以看出，软引用在引用存在时，只有当内存充足时，才不会被gc回收，否则当内存不足时，gc会强制回收软引用对象占用的空间。 弱引用弱引用存在时，只要触发了gc，弱引用对象就会被强制回收，无论此时jvm内存空间是否充足。 测试代码： 123456789101112131415161718192021222324WeakReference&lt;byte[]&gt; arr &#x3D; null;byte[] arr2 &#x3D; null;try &#123; arr &#x3D; new WeakReference&lt;byte[]&gt;(new byte[1024 * 1024 * 12]); &#x2F;&#x2F; arr：(有值) System.out.println(&quot;arr new: &quot; + arr.get()); &#x2F;&#x2F; 通知jvm gc System.gc(); &#x2F;&#x2F; 这里睡2s是为了保证gc能执行完成 Thread.sleep(2000); &#x2F;&#x2F; arr：gc直接回收，(无值) System.out.println(&quot;arr after gc: &quot; + arr.get()); &#x2F;&#x2F; 没有啥限制了 arr2 &#x3D; new byte[1024 * 1024 * 12]; &#x2F;&#x2F; arr2：(有值) System.out.println(&quot;arr2 new: &quot; + arr2);&#125; catch (Exception e) &#123; e.printStackTrace();&#125; finally &#123; &#x2F;&#x2F; arr：gc已回收，(无值) System.out.println(&quot;arr final: &quot; + arr.get()); &#x2F;&#x2F; arr2：(有值) System.out.println(&quot;arr2 final: &quot; + arr2);&#125; 输出结果： 12345arr new: [B@1b6d3586arr after gc: nullarr2 new: [B@4554617carr final: nullarr2 final: [B@4554617c 从输出结果可以看出，弱引用在引用存在时，只要触发了gc，弱引用就会被gc回收掉。 虚引用虚引用存在时，一般由堆外内存控制虚引用，类似directBuffer，待验证。","categories":[{"name":"Java基础","slug":"Java基础","permalink":"http://example.com/categories/Java%E5%9F%BA%E7%A1%80/"}],"tags":[{"name":"Java","slug":"Java","permalink":"http://example.com/tags/Java/"}]}],"categories":[{"name":"Java基础","slug":"Java基础","permalink":"http://example.com/categories/Java%E5%9F%BA%E7%A1%80/"}],"tags":[{"name":"Java","slug":"Java","permalink":"http://example.com/tags/Java/"}]}